!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.options=t,this._scaleBy=1,window.devicePixelRatio>1&&(this._scaleBy=window.devicePixelRatio),this._radius=(this.options.size-this.options.lineWidth)/2,this.options.scaleColor&&this.options.scaleLength&&(this._radius-=this.options.scaleLength+2),Date.now=Date.now||function(){return+new Date}}return t.prototype.animate=function(t,e){var i=this,n=window.requestAnimationFrame||window.webkitRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)},o=Date.now();this.options.onStart(t,e);var s=function(){var r=Math.min(Date.now()-o,i.options.animate.duration),a=i.options.easing(i,r,t,e-t,i.options.animate.duration);i.draw(a),i.options.onStep(t,e,a),r>=i.options.animate.duration?i.options.onStop(t,e):n(s)};n(s)},Object.defineProperty(t.prototype,"radius",{get:function(){return this._radius},set:function(t){this._radius=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scaleBy",{get:function(){return this._scaleBy},set:function(t){this._scaleBy=t},enumerable:!0,configurable:!0}),t}();e.Renderer=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(2),o=i(3),s=function(){function t(t,e){if(this.defaultOptions={barColor:"#ef1e25",trackColor:"#f9f9f9",scaleColor:"#dfe0e0",scaleLength:5,lineCap:"round",lineWidth:3,size:110,rotate:0,animate:1e3,renderer:null,easing:function(t,e,i,n,o){return(e/=o/2)<1?n/2*e*e+i:-n/2*(--e*(e-2)-1)+i},onStart:function(t,e){},onStep:function(t,e,i){},onStop:function(t,e){}},this.currentValue=0,this.element=t,null!==e)for(var i in e)this.defaultOptions.hasOwnProperty(i)&&(this.defaultOptions[i]=e[i]);this.options=this.defaultOptions,this.element.setAttribute("style","position: relative;display: inline-block;text-align: center;"),this.element.style.width=this.options.size+"px",this.element.style.height=this.options.size+"px",this.percent=void 0!==t.dataset.percent?t.dataset.percent:"";var s=document.createElement("span"),r=this.element.appendChild(s);r.setAttribute("style","line-height: 110px; z-index: 2;"),r.textContent=this.percent,"SVG"===this.options.renderer?this.renderer=new o.SVGRenderer(this.element,this.options):this.renderer=new n.CanvasRenderer(this.element,this.options),"number"==typeof this.options.animate&&(this.options.animate={duration:this.options.animate,enabled:!0}),"boolean"!=typeof this.options.animate||this.options.animate||(this.options.animate={duration:1e3,enabled:this.options.animate}),this.renderer.draw(this.currentValue),t.dataset&&this.percent?this.update(parseFloat(this.percent)):t.getAttribute&&t.getAttribute("data-percent")&&this.update(parseFloat(t.getAttribute("data-percent")))}return t.prototype.update=function(t){return this.options.animate.enabled?this.renderer.animate(this.currentValue,t):this.renderer.draw(t),this.currentValue=t,this},t.prototype.disableAnimation=function(){return this.options.animate.enabled=!1,this},t.prototype.enableAnimation=function(){return this.options.animate.enabled=!0,this},t}();e.EasyPieChart=s},function(t,e,i){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(e,i){var n=t.call(this,i)||this;return n._canvas=document.createElement("canvas"),n._ctx=n._canvas.getContext("2d"),e.appendChild(n._canvas),n._canvas.setAttribute("style","position: absolute;top: 0;left: 0;"),window.devicePixelRatio>1&&(n._canvas.style.width=n._canvas.style.height=[n.options.size,"px"].join(""),n._canvas.width=n._canvas.height=n.options.size*n.scaleBy,n._ctx.scale(n.scaleBy,n.scaleBy)),n._ctx.translate(n.options.size/2,n.options.size/2),n._ctx.rotate((n.options.rotate/180-.5)*Math.PI),n._cachedBackground=n._ctx.getImageData(0,0,n.options.size*n.scaleBy,n.options.size*n.scaleBy),n}return o(e,t),e.prototype.drawCircle=function(t,e,i){var n=(i=Math.min(Math.max(-1,i||0),1))<=0;this._ctx.beginPath(),this._ctx.arc(0,0,this.radius,0,2*Math.PI*i,n),this._ctx.strokeStyle=t,this._ctx.lineWidth=e,this._ctx.stroke()},e.prototype.drawScale=function(){var t,e,i=1;this._ctx.lineWidth=1,this._ctx.fillStyle=this.options.scaleColor,this._ctx.save();for(var n=24;n>0;--n)n%6==0?(e=1.2*this.options.scaleLength,t=0,i=3):(e=.6*this.options.scaleLength,t=this.options.scaleLength-e,i=1),this._ctx.fillRect(-this.options.size/2+t,0,e,i),this._ctx.rotate(Math.PI/12);this._ctx.restore()},e.prototype.clear=function(){this._ctx.clearRect(this.options.size/-2,this.options.size/-2,this.options.size,this.options.size)},e.prototype.draw=function(t){var e;this._ctx.lineCap=this.options.lineCap,e="function"==typeof this.options.barColor?this.options.barColor(t):this.options.barColor,this.drawScale(),this.drawCircle(e,this.options.lineWidth,t/100)},Object.defineProperty(e.prototype,"canvas",{get:function(){return this._canvas},set:function(t){this._canvas=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ctx",{get:function(){return this._ctx},set:function(t){this._ctx=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cachedBackground",{get:function(){return this._cachedBackground},set:function(t){this._cachedBackground=t},enumerable:!0,configurable:!0}),e}(i(0).Renderer);e.CanvasRenderer=s},function(t,e,i){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(e,i){var n=t.call(this,i)||this;return n._svgNS="http://www.w3.org/2000/svg",n._hasScale=n.options.scaleColor&&n.options.scaleLength,n._hasScale?n.radius-=n.options.scaleLength+2:n.radius=(n.options.size-n.options.lineWidth)/2,n.svg=n.createElement("svg",{version:1.1,width:n.options.size,height:n.options.size}),n.options.trackColor&&n.svg.appendChild(n.createElement("circle",{cx:n.options.size/2,cy:n.options.size/2,r:n.radius,stroke:n.options.trackColor,"stroke-width":n.options.lineWidth,fill:"none"})),n._hasScale&&n.drawScale(),n.arc=n.createElement("path",{stroke:"function"==typeof n.options.barColor?n.options.barColor(0):n.options.barColor,"stroke-width":n.options.lineWidth,"stroke-linecap":n.options.lineCap,fill:"none"}),n.options.rotate&&n.arc.setAttribute("transform",["rotate(",n.options.rotate,",",n.options.size/2,",",n.options.size/2,")"].join("")),n.svg.appendChild(n.arc),e.appendChild(n.svg),n}return o(e,t),e.prototype.createElement=function(t,e){var i=document.createElementNS(this._svgNS,t);if(e)for(var n in e)e.hasOwnProperty(n)&&i.setAttribute(n,e[n]);return i},e.prototype.clear=function(){this.svg.parentNode.removeChild(this.svg)},e.prototype.drawScale=function(){for(var t=this.createElement("g",{transform:"translate(55, 55)"}),e=0;e<24;++e){var i=this.options.scaleLength,n=1;e%6!=0?i*=.6:(i*=1.2,n=3);var o=360*e/24+this.options.rotate;t.appendChild(this.createElement("path",{d:["M",0,0,"l",0,i].join(" "),stroke:this.options.scaleColor,"stroke-width":n,fill:"none",transform:["rotate("+o+") translate(0,",this.options.size/2-this.options.scaleLength,")"].join("")}))}this.svg.appendChild(t)},e.prototype.draw=function(t){var e=3.6*t,i=e*Math.PI/180,n=this.options.size/2+this.radius*Math.sin(i),o=this.options.size/2-this.radius*Math.cos(i),s=this.options.lineWidth/3;this._hasScale&&(s+=this.options.scaleLength+10);var r=["M",this.options.size/2,s,"A",this.radius,this.radius,0,+(e>180),1,n,o];this.arc.setAttribute("d",r.join(" ")),"function"==typeof this.options.barColor&&this.arc.setAttribute("stroke",this.options.barColor(t))},e}(i(0).Renderer);e.SVGRenderer=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,